@page "/login"

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@code {

	private RegistrationsOpen? registrationsOpen;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (!firstRender)
			return;

		// prevent logged-in users from seeing the login page
		var state = await AuthStateProvider.GetAuthenticationStateAsync();
		if (state.User.Identity is { IsAuthenticated: true })
			NavigationManager.NavigateTo("/");
	}

}

<MudStack Spacing="4">
	<h1>Hello, anonymous!</h1>

	<LoginForm/>

	<RegistrationsOpen @ref="registrationsOpen">
		<Loading>
			<MudAlert Severity="Severity.Info">
				Loading registrations status...
			</MudAlert>
		</Loading>
		<Open>
			<RegisterForm/>
		</Open>
		<Error>
			<MudAlert Severity="Severity.Error">
				Could not determine if registrations are open.

				@if (registrationsOpen is not null)
				{
					<a href="#" @onclick="registrationsOpen.ReloadRegistrationsStatus">Retry</a>
				}
			</MudAlert>
		</Error>
	</RegistrationsOpen>
</MudStack>
