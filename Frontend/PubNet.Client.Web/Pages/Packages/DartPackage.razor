@page "/dart/{Name}"
@page "/dart/{Name}/v/{Version}"

@inject IDartPackagesService DartPackagesService

@code {

	[Parameter, EditorRequired]
	public required string Name { get; set; }

	[Parameter]
	public string? Version { get; set; }

	private DartPackageDto? package;
	private DartPackageVersionDto? packageVersion;
	private DartPackageVersionAnalysisDto? analysis;

	private bool isLoadingPackage;
	private bool isLoadingAnalysis;

	private bool IsLoading => isLoadingPackage || isLoadingAnalysis;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await LoadPackage(default);
	}

	private async Task LoadPackage(CancellationToken cancellationToken)
	{
		isLoadingPackage = true;
		isLoadingAnalysis = true;

		try
		{
			package = await DartPackagesService.GetPackageAsync(Name, cancellationToken);

			if (package is not null)
				packageVersion = Version is null
					? package.Latest
					: package.Versions?.FirstOrDefault(v => v.Version == Version);
		}
		finally
		{
			isLoadingPackage = false;
		}

		if (packageVersion is null)
		{
			isLoadingAnalysis = false;

			return;
		}

		try
		{
			analysis = await DartPackagesService.GetPackageVersionAnalysisAsync(Name, packageVersion.Version!, cancellationToken);
		}
		finally
		{
			isLoadingAnalysis = false;
		}
	}

}

@if (IsLoading)
{
	<MudText Typo="Typo.h3" GutterBottom>@Name</MudText>

	<MudProgressCircular Indeterminate/>
}
else if (package is null)
{
	<MudText Typo="Typo.h3" GutterBottom>@Name</MudText>

	<MudAlert Severity="Severity.Error">
		Package not found.<br/>
		<br/>
		<MudLink Href="@($"https://pub.dev/packages/{Name}")" Target="_blank">
			Check on pub.dev
		</MudLink>
	</MudAlert>
}
else if (packageVersion is null)
{
	<MudText Typo="Typo.h3" GutterBottom>@Name @Version</MudText>

	<MudAlert Severity="Severity.Error">
		Package version not found.<br/>
		<br/>
		<LinkToPackage Name="@Name">
			Show latest version
		</LinkToPackage>
	</MudAlert>
}
else if (package is not null && packageVersion is not null)
{
	<MudText Typo="Typo.h3">@package.Name @packageVersion.Version</MudText>

	<MudText Typo="Typo.subtitle1">
		created by <LinkToAuthor Name="@package.Author"/>
		at <em>@packageVersion.PublishedAt</em>
	</MudText>

	<MudStack Row Spacing="5" Class="mt-5">
		<MudStack Spacing="5" Class="flex-grow-1">
			<!-- TODO: Badges -->

			<MudTabs Rounded HideSlider PanelClass="mt-5 rounded overflow-x-auto">
				<MudTabPanel Text="README">
					@if (analysis?.ReadmeText is not null)
					{
						<Markdown Content="@analysis.ReadmeText"/>
					}
					else if (analysis is not null)
					{
						<MudText Typo="Typo.body1">No README found</MudText>
					}
					else
					{
						<MudText Typo="Typo.body1">Analysis not completed yet.</MudText>
					}
				</MudTabPanel>
				<MudTabPanel Text="Versions">
					<DartPackageVersionsTable Versions="package.Versions"/>
				</MudTabPanel>
			</MudTabs>
		</MudStack>

		<MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Stretch" StretchItems="StretchItems.None">
			<MudText Typo="Typo.subtitle1">Points</MudText>

			<MudDivider Class="flex-grow-0"/>

			<MudText Typo="Typo.subtitle1">Description</MudText>

			<MudText Typo="Typo.body2">@packageVersion.Pubspec?.Description</MudText>

			<MudDivider Class="flex-grow-0"/>

			<MudText Typo="Typo.subtitle1">Dependencies</MudText>

			@if (packageVersion.Pubspec?.Dependencies?.AdditionalData is { } dependencies)
			{
				<MudText>
					<ul>
						@foreach (var (dependency, constraint) in dependencies.OrderBy(d => d.Key))
						{
							<li>
								<LinkToPackage Name="@(dependency!)"/> @constraint
							</li>
						}
					</ul>
				</MudText>
			}
			else
			{
				<MudText>This package has no dependencies</MudText>
			}

			<MudDivider Class="flex-grow-0"/>

			<MudText Typo="Typo.subtitle1">License</MudText>

			<MudDivider Class="flex-grow-0"/>

			<MudText Typo="Typo.subtitle1">Dependents</MudText>

		</MudStack>
	</MudStack>
}
