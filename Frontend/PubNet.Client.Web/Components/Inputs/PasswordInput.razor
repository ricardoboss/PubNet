@using DuoBlazorIcons.Components
@code {

	[Parameter]
	public string? Id { get; set; }

	[Parameter]
	public string? Password { get; set; }

	[Parameter]
	public EventCallback<string> PasswordChanged { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }

	private bool isRevealed;
	private string? password;

	private Dictionary<string, object> AdditionalAttributesInternal
	{
		get
		{
			var attributes = AdditionalAttributes ?? new Dictionary<string, object>();

			if (Id is { } id)
				attributes["id"] = id;

			attributes["type"] = Type;

			return attributes;
		}
	}

	private string Type => isRevealed ? "text" : "password";

	private async Task OnPasswordChanged(ChangeEventArgs e)
	{
		password = e.Value?.ToString();

		await PasswordChanged.InvokeAsync(password);
	}

	private void ToggleRevealPassword()
	{
		isRevealed = !isRevealed;
	}

}

<div>
	<input value="@password" @oninput="OnPasswordChanged" @attributes="AdditionalAttributesInternal" />
	<Icon Name="@(isRevealed ? IconName.Sun : IconName.Target)" @onclick="ToggleRevealPassword" />
</div>
