@using System.Diagnostics.CodeAnalysis
@using DuoBlazorIcons.Components
@inherits InputBase<string>

@code {

	[Parameter]
	public string? Id { get; set; }

	private bool isRevealed;

	private Dictionary<string, object> AdditionalAttributesInternal
	{
		get
		{
			var attributes = AdditionalAttributes?.ToDictionary() ?? new Dictionary<string, object>();

			if (Id is { } id)
				attributes["id"] = id;

			attributes["type"] = Type;

			return attributes;
		}
	}

	private string Type => isRevealed ? "text" : "password";

	private void ToggleRevealPassword()
	{
		isRevealed = !isRevealed;
	}

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		if (value is null)
		{
			result = null;
			validationErrorMessage = "The password cannot be empty.";

			return false;
		}

		result = value;
		validationErrorMessage = null;

		return true;
	}

}

<div>
	<input @bind="CurrentValue" @attributes="AdditionalAttributesInternal"/>
	<Icon Name="@(isRevealed ? IconName.Sun : IconName.Target)" @onclick="ToggleRevealPassword"/>
</div>
