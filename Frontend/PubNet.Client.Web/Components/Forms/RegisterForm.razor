@inject IRegisterService RegisterService
@inject ILogger<RegisterForm> Logger

@code {

	private CreateAccountDto Model { get; } = new();

	private string? Error { get; set; }

	private bool IsSubmitDisabled => string.IsNullOrWhiteSpace(Model.UserName) || string.IsNullOrWhiteSpace(Model.Email) || string.IsNullOrWhiteSpace(Model.Password);

	private async Task Submit()
	{
		try
		{
			await RegisterService.RegisterAsync(Model);
		}
		catch (Exception e)
		{
			Logger.LogError(e, "Failed to register");

			Error = e.Message;
		}
	}

}

<EditForm Model="@Model" OnValidSubmit="Submit">
	<DataAnnotationsValidator/>
	<ValidationSummary/>
	@if (Error is { } error)
	{
		<Card Variant="CardVariant.Danger">@error</Card>
	}

	<div>
		<label for="register-username">Username</label>
		<InputText id="register-username" @bind-Value="Model.UserName"/>
		<ValidationMessage For="@(() => Model.UserName)"/>
	</div>

	<div>
		<label for="register-email">Email address</label>
		<InputText id="register-email" @bind-Value="Model.Email"/>
		<ValidationMessage For="@(() => Model.Email)"/>
	</div>

	<div>
		<label for="register-password">Password</label>
		<InputPassword id="register-password" @bind-Value="Model.Password" autocomplete="new-password"/>
		<ValidationMessage For="@(() => Model.Password)"/>
	</div>

	<FilledButton Submit Disabled="@IsSubmitDisabled">Register</FilledButton>

</EditForm>
