@using Rive.Blazor.Wasm

@code {

	[Parameter]
	public bool Animated { get; set; }

	[Parameter]
	public bool Inline { get; set; }

	[Parameter, EditorRequired]
	public required int Size { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }

	private string? ImpliedStyle => Inline ? "display: inline-block;" : null;

	private Dictionary<string, object> InternalAdditionalAttributes
	{
		get
		{
			var attributes = new Dictionary<string, object>();
			if (ImpliedStyle is { } style)
				attributes.Add("style", style);

			if (AdditionalAttributes is not { } additionalAttributes)
				return attributes;

			foreach (var (key, value) in additionalAttributes)
				attributes.Add(key, value);

			return attributes;
		}
	}

	private string? imageSrc;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		imageSrc = FindBestImageSrc(Size);
	}

	private static int[] availableSizes = [500, 256, 196, 128, 80, 40];

	private static string FindBestImageSrc(int desiredSize)
	{
		var closestAvailableSize = availableSizes
			.Order()
			.FirstOrDefault(s => s >= desiredSize, availableSizes.Max());

		return $"/assets/logo.{closestAvailableSize}x{closestAvailableSize}.png";
	}

}

@if (Animated)
{
	<RivePlayer
		File="assets/logo.riv"
		Width="@Size"
		Height="@Size"
		Autoplay
		StateMachines="State Machine"
		@attributes="@InternalAdditionalAttributes"/>
}
else
{
	<MudImage
		Src="@imageSrc"
		Alt="PubNet Logo; A gray box with purple layers floating inside"
		Width="@Size"
		Height="@Size"
		@attributes="@InternalAdditionalAttributes"/>
}
