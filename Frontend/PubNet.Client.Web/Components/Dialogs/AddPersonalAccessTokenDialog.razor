@inject IPersonalAccessTokenService PersonalAccessTokenService
@inject ILogger<AddPersonalAccessTokenDialog> Logger

@code {

	[CascadingParameter]
	public required MudDialogInstance Dialog { get; set; }

	private bool isSubmitting;

	private bool isLoadingAvailableScopes = true;

	private readonly CreatePersonalAccessTokenDto model = new();

	private IReadOnlyCollection<string> availableScopes = [];

	private IReadOnlyCollection<string> selectedScopes = [];


	private bool IsSubmitDisabled => isSubmitting || expiresAt is null || !selectedScopes.Any();

	private DateTime? expiresAt = DateTime.Now.AddDays(90);

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
			await LoadAvailableScopes();
	}

	private async Task LoadAvailableScopes()
	{
		isLoadingAvailableScopes = true;

		try
		{
			availableScopes = await PersonalAccessTokenService.GetAllowedScopesAsync();
		}
		finally
		{
			isLoadingAvailableScopes = false;

			StateHasChanged();
		}
	}

	private async Task Submit()
	{
		try
		{
			isSubmitting = true;

			model.LifetimeInDays = (int)Math.Ceiling((expiresAt!.Value - DateTime.Now).TotalDays);
			model.Scopes = selectedScopes.ToList();

			var result = await PersonalAccessTokenService.CreateAsync(model);

			Dialog.Close(DialogResult.Ok(result));
		}
		catch (Exception e)
		{
			Logger.LogError(e, "Failed to create personal access token");
		}
		finally
		{
			isSubmitting = false;
		}
	}

	private void Cancel() => Dialog.Cancel();

}

<EditForm Model="@model" OnValidSubmit="Submit">
	<MudDialog>
		<TitleContent>
			Add Personal Access Token
		</TitleContent>
		<DialogContent>
			<MudGrid>
				<MudItem xs="12" sm="6">
					<MudText Typo="Typo.subtitle1">Details</MudText>

					<MudTextField
						T="string?"
						Class="mt-3"
						Label="Name"
						Immediate
						Required
						@bind-Value="model.Name"
						For="() => model.Name"
						Variant="Variant.Outlined"
						InputType="InputType.Text"/>

					<MudDatePicker
						Class="mt-5"
						@bind-Date="expiresAt"
						MaxDate="DateTime.Now.AddDays(365)"
						MinDate="DateTime.Now"
						Required
						Label="Expires At"
						Variant="Variant.Outlined"/>
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudText Typo="Typo.subtitle1">Scopes</MudText>

					@if (isLoadingAvailableScopes)
					{
						<MudStack Row Justify="Justify.Center">
							<MudProgressCircular
								Indeterminate
								Size="Size.Small"
								Color="Color.Primary"/>
						</MudStack>
					}
					else
					{
						<ScopesTreeView
							Class="mt-3"
							AvailableScopes="availableScopes"
							@bind-SelectedScopes="selectedScopes"/>
					}

					@if (selectedScopes.Count == 0)
					{
						<MudText Typo="Typo.subtitle2" Color="Color.Error">Select at least one scope.</MudText>
					}
				</MudItem>
			</MudGrid>
		</DialogContent>
		<DialogActions>
			<MudButton OnClick="@Cancel">Cancel</MudButton>
			@if (isSubmitting)
			{
				<MudProgressCircular
					Indeterminate
					Size="Size.Small"
					Color="Color.Primary"
					Class="mx-2"/>
			}
			<MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="IsSubmitDisabled">Submit</MudButton>
		</DialogActions>
	</MudDialog>
</EditForm>
