@using PubNet.API.DTO
@using System.Net

@inject PackagesService PackagesService
@inject AnalysisService AnalysisService
@inject AuthenticationService Auth
@inject AlertService Alert
@inject NavigationManager Nav
@inject ApiClient Http

@if (Version is null)
{
    <Paragraph TextColor="TextColor.Muted">
        <em>Loading...</em>
    </Paragraph>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is12.Is8.OnDesktop">
            <PackageHeader Package="@Package" Version="@Version"/>

            <Card Margin="Margin.Is3.FromTop">
                <CardBody>
                    <CardText>
                        <Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                            <Items>
                                <Tab Name="readme">Readme</Tab>
                                <Tab Name="versions">Versions</Tab>
                            </Items>
                            <Content>
                                <TabPanel Name="readme">
                                    @if (Analysis?.ReadmeText is not null)
                                    {
                                        <Markdown Content="@Analysis.ReadmeText" BaseUrl="@Version.PubSpec.Repository"/>
                                    }
                                    else if (Analysis?.ReadmeFound is false)
                                    {
                                        <Paragraph TextColor="TextColor.Muted">
                                            <em>No README.md found.</em>
                                        </Paragraph>
                                    }
                                    else if (IsMirrored != true)
                                    {
                                        <Paragraph TextColor="TextColor.Muted">
                                            <em>README analysis pending</em>
                                        </Paragraph>
                                    }
                                </TabPanel>
                                <TabPanel Name="versions">
                                    @if (PackageVersions is not null)
                                    {
                                        <Table>
                                            <TableHeader>
                                                <TableRow>
                                                    <TableHeaderCell>Version</TableHeaderCell>
                                                    <TableHeaderCell>Published At</TableHeaderCell>
                                                    @if (!IsMirrored)
                                                    {
                                                        <TableHeaderCell>Badges</TableHeaderCell>
                                                    }
                                                    @if (ShowPackageAdminTools)
                                                    {
                                                        <TableHeaderCell>Actions</TableHeaderCell>
                                                    }
                                                </TableRow>
                                            </TableHeader>
                                            <TableBody>
                                                @foreach (var version in PackageVersions.OrderByDescending(v => v.Published).Take(10))
                                                {
                                                    <TableRow>
                                                        <TableRowCell>
                                                            <NavLink href="@($"/packages/{Package?.Name}/versions/{TextGenerator.VersionToUrlSegment(version.Version)}")">
                                                                <Code>@version.Version</Code>
                                                            </NavLink>

                                                            <ClickToCopyButton Content="@(PubspecVersionText(version.Version))"/>
                                                        </TableRowCell>
                                                        <TableRowCell>
                                                            <Abbreviation Title="@version.Published.ToString()">@(version.Published.Humanize())</Abbreviation>
                                                        </TableRowCell>
                                                        @if (!IsMirrored)
                                                        {
                                                            <TableRowCell>
                                                                <AnalysisBadges PackageDto="@Package" PackageVersionDto="@version" HideNonVersionSpecificBadges="@true"/>
                                                            </TableRowCell>
                                                        }
                                                        @if (ShowPackageAdminTools)
                                                        {
                                                            <TableRowCell>
                                                                <div style="display: flex; align-items: center; gap: 0.25rem">
                                                                    @if (!version.Retracted)
                                                                    {
                                                                        <Button Size="Size.Small" Color="Color.Warning" Clicked="() => OnRetractVersionClicked(version.Version)" Disabled="@Editing">Retract</Button>
                                                                    }

                                                                    <Button Size="Size.Small" Color="Color.Danger" Clicked="() => OnDeleteVersionClicked(version.Version)" Disabled="@Editing">Delete</Button>
                                                                </div>
                                                            </TableRowCell>
                                                        }
                                                    </TableRow>
                                                }

                                                @if (PackageVersions.Count > 10)
                                                {
                                                    <TableRow>
                                                        <TableRowCell colspan="3" TextColor="TextColor.Muted">
                                                            &hellip; and @(PackageVersions.Count - 10) older versions
                                                        </TableRowCell>
                                                    </TableRow>
                                                }
                                            </TableBody>
                                        </Table>
	                                }
	                                else
	                                {
	                                    <Paragraph Margin="Margin.Is3.FromTop" TextColor="TextColor.Muted">
                                            <em>No versions found.</em>
                                        </Paragraph>
	                                }
                                </TabPanel>
                            </Content>
                        </Tabs>
                    </CardText>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.Is4.OnDesktop">
            @if (ShowPackageAdminTools)
            {
                <Heading Size="HeadingSize.Is3">Package Admin Tools</Heading>

                <PackageAdminToolbar
                    Margin="Margin.Is3.OnY"
                    Package="@Package"
                    Editing="@Editing"
                    OnDeleteClicked="OnDeleteClicked"
                    OnDiscontinueClicked="OnDiscontinueClicked"/>
            }

            <Heading Size="HeadingSize.Is3">Description</Heading>

            <Lead Margin="Margin.Is3.OnY">
                @(Version.PubSpec.Description)
            </Lead>

            <Heading Size="HeadingSize.Is3">Dependencies</Heading>

            @if (Version.PubSpec.Dependencies is null or { Count: 0 })
            {
                <Paragraph Margin="Margin.Is3.OnY">
                    <em>No dependencies.</em>
                </Paragraph>
            }
            else
            {
                <Div Class="content">
                    <UnorderedList Margin="Margin.Is3.OnY">
                        <Repeater Items="Version.PubSpec.Dependencies.Keys">
                            <UnorderedListItem>
                                <NavLink href="@TextGenerator.HrefToDependency(context)">@context</NavLink>
                            </UnorderedListItem>
                        </Repeater>
                    </UnorderedList>
                </Div>
            }

            <Heading Size="HeadingSize.Is3">Dev Dependencies</Heading>

            @if (Version.PubSpec.DevDependencies is null or { Count: 0 })
            {
                <Paragraph Margin="Margin.Is3.OnY">
                    <em>No dev dependencies.</em>
                </Paragraph>
            }
            else
            {
                <Div Class="content">
                    <UnorderedList Margin="Margin.Is3.OnY">
                        <Repeater Items="Version.PubSpec.DevDependencies.Keys">
                            <UnorderedListItem>
                                <NavLink href="@TextGenerator.HrefToDependency(context)">@context</NavLink>
                            </UnorderedListItem>
                        </Repeater>
                    </UnorderedList>
                </Div>
            }
        </Column>
    </Row>
}

@code {

    [Parameter]
    public PackageDto? Package { get; set; }

    [Parameter]
    public PackageVersionDto? Version { get; set; }

    [Parameter]
    public EventCallback<string?> OnError { get; set; }

    [Parameter]
    public EventCallback<string?> OnInfo { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditing { get; set; }

    [Parameter]
    public EventCallback OnPackageChanged { get; set; }

    private bool IsMirrored => Package?.Mirrored ?? false;

    private string PubspecVersionText(string version)
    {
        return Package?.Name is null
            ? string.Empty
            : TextGenerator.PubspecVersionText(Package.Name, version, IsMirrored, Http.BaseAddress);
    }

    private PackageVersionAnalysisDto? Analysis { get; set; }

    private bool ShowPackageAdminTools { get; set; }

    private List<PackageVersionDto>? PackageVersions => Package?.Versions;

    string _selectedTab = "readme";

    private Task OnSelectedTabChanged( string name )
    {
        _selectedTab = name;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Package is null)
            return;

        Version ??= Package.Latest;
        if (Version is null)
            return;

        ShowPackageAdminTools = !IsMirrored && await Auth.IsSelf(Package.Author?.UserName);

        try
        {
            Analysis = await AnalysisService.GetAnalysisForVersion(Version.PubSpec.Name, Version.Version, true);
        }
        catch (Exception)
        {
            // ignored
        }
    }

    private async Task OnDiscontinueClicked()
    {
        if (Package is null) return;

        var replacement = await Alert.Prompt($"Are you sure you want to discontinue {Package.Name}? This change cannot be undone.\r\n\r\nYou can suggest a replacement package here:");
        if (replacement is null)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.DiscontinuePackage(Package.Name, replacement);

            await OnInfo.InvokeAsync($"Package {Package.Name} has been marked as discontinued.");

            await OnPackageChanged.InvokeAsync();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            await OnEditing.InvokeAsync(false);
        }
    }

    private async Task OnDeleteClicked()
    {
        if (Package is null) return;

        var confirmed = await Alert.Confirm("Are you sure? All versions will be deleted and you can no longer 'pub get' it.");
        if (!confirmed)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.DeletePackage(Package.Name);

            Nav.NavigateTo("/?message=package-deleted");
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            await OnEditing.InvokeAsync(false);
        }
    }

    private async Task OnDeleteVersionClicked(string version)
    {
        if (Package is null) return;

        var confirmed = await Alert.Confirm($"Are you sure you want to delete {Package.Name}: {version}? This cannot be undone.");
        if (!confirmed)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.DeletePackageVersion(Package.Name, version);

            await OnInfo.InvokeAsync($"Version {version} has been deleted.");

            await OnPackageChanged.InvokeAsync();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            Editing = false;
        }
    }

    private async Task OnRetractVersionClicked(string version)
    {
        if (Package is null) return;

        var confirmed = await Alert.Confirm($"Are you sure you want to retract {Package.Name}: {version}? This cannot be undone.");
        if (!confirmed)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.RetractVersion(Package.Name, version);

            await OnInfo.InvokeAsync($"Package version {version} has been marked as retracted.");

            await OnPackageChanged.InvokeAsync();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            await OnEditing.InvokeAsync(false);
        }
    }
}
