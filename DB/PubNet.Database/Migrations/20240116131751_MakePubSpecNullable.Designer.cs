// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PubNet.Database;
using PubNet.Database.Models;

#nullable disable

namespace PubNet.Database.Migrations
{
    [DbContext(typeof(PubNetContext))]
    [Migration("20240116131751_MakePubSpecNullable")]
    partial class MakePubSpecNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PubNet.Database.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("RegisteredAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("boolean");

                    b.Property<int?>("LatestId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReplacedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LatestId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<string>("ArchiveSha256")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArchiveUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DartPackageId")
                        .HasColumnType("integer");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<PubSpec>("PubSpec")
                        .HasColumnType("json");

                    b.Property<DateTimeOffset>("PublishedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Retracted")
                        .HasColumnType("boolean");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DartPackageId");

                    b.HasIndex("PublishedAtUtc")
                        .IsDescending();

                    b.HasIndex("Version");

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("PubNet.Database.Models.PackageVersionAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentationLink")
                        .HasColumnType("text");

                    b.Property<bool?>("Formatted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReadmeFound")
                        .HasColumnType("boolean");

                    b.Property<string>("ReadmeText")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VersionId")
                        .IsUnique();

                    b.ToTable("PackageVersionAnalyses");
                });

            modelBuilder.Entity("PubNet.Database.Models.PendingArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArchivePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UploadedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploaderId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("PendingArchives");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackage", b =>
                {
                    b.HasOne("PubNet.Database.Models.Author", "Author")
                        .WithMany("DartPackages")
                        .HasForeignKey("AuthorId");

                    b.HasOne("PubNet.Database.Models.DartPackageVersion", "Latest")
                        .WithMany()
                        .HasForeignKey("LatestId");

                    b.Navigation("Author");

                    b.Navigation("Latest");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackageVersion", b =>
                {
                    b.HasOne("PubNet.Database.Models.DartPackage", null)
                        .WithMany("Versions")
                        .HasForeignKey("DartPackageId");
                });

            modelBuilder.Entity("PubNet.Database.Models.PackageVersionAnalysis", b =>
                {
                    b.HasOne("PubNet.Database.Models.DartPackageVersion", "Version")
                        .WithOne("Analysis")
                        .HasForeignKey("PubNet.Database.Models.PackageVersionAnalysis", "VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("PubNet.Database.Models.PendingArchive", b =>
                {
                    b.HasOne("PubNet.Database.Models.Author", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("PubNet.Database.Models.Author", b =>
                {
                    b.Navigation("DartPackages");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackage", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("PubNet.Database.Models.DartPackageVersion", b =>
                {
                    b.Navigation("Analysis");
                });
#pragma warning restore 612, 618
        }
    }
}
