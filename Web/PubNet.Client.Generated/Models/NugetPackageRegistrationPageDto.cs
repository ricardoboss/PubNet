// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PubNet.Client.Generated.Models {
    public class NugetPackageRegistrationPageDto : IParsable 
    {
        /// <summary>The count property</summary>
        public int? Count { get; set; }
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<NugetPackageRegistrationLeafDto>? Items { get; set; }
#nullable restore
#else
        public List<NugetPackageRegistrationLeafDto> Items { get; set; }
#endif
        /// <summary>The lower property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Lower { get; set; }
#nullable restore
#else
        public string Lower { get; set; }
#endif
        /// <summary>The parent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Parent { get; set; }
#nullable restore
#else
        public string Parent { get; set; }
#endif
        /// <summary>The upper property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Upper { get; set; }
#nullable restore
#else
        public string Upper { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="NugetPackageRegistrationPageDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static NugetPackageRegistrationPageDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new NugetPackageRegistrationPageDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"count", n => { Count = n.GetIntValue(); } },
                {"@id", n => { Id = n.GetStringValue(); } },
                {"items", n => { Items = n.GetCollectionOfObjectValues<NugetPackageRegistrationLeafDto>(NugetPackageRegistrationLeafDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"lower", n => { Lower = n.GetStringValue(); } },
                {"parent", n => { Parent = n.GetStringValue(); } },
                {"upper", n => { Upper = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("count", Count);
            writer.WriteStringValue("@id", Id);
            writer.WriteCollectionOfObjectValues<NugetPackageRegistrationLeafDto>("items", Items);
            writer.WriteStringValue("lower", Lower);
            writer.WriteStringValue("parent", Parent);
            writer.WriteStringValue("upper", Upper);
        }
    }
}
