// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PubNet.Client.Generated.Models {
    public class DartPackageVersionAnalysisDto : IParsable {
        /// <summary>The completedAt property</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>The documentationGenerated property</summary>
        public bool? DocumentationGenerated { get; set; }
        /// <summary>The formatted property</summary>
        public bool? Formatted { get; set; }
        /// <summary>The packageName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageName { get; set; }
#nullable restore
#else
        public string PackageName { get; set; }
#endif
        /// <summary>The packageVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageVersion { get; set; }
#nullable restore
#else
        public string PackageVersion { get; set; }
#endif
        /// <summary>The readmeFound property</summary>
        public bool? ReadmeFound { get; set; }
        /// <summary>The readmeText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReadmeText { get; set; }
#nullable restore
#else
        public string ReadmeText { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DartPackageVersionAnalysisDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DartPackageVersionAnalysisDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"completedAt", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                {"documentationGenerated", n => { DocumentationGenerated = n.GetBoolValue(); } },
                {"formatted", n => { Formatted = n.GetBoolValue(); } },
                {"packageName", n => { PackageName = n.GetStringValue(); } },
                {"packageVersion", n => { PackageVersion = n.GetStringValue(); } },
                {"readmeFound", n => { ReadmeFound = n.GetBoolValue(); } },
                {"readmeText", n => { ReadmeText = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("completedAt", CompletedAt);
            writer.WriteBoolValue("documentationGenerated", DocumentationGenerated);
            writer.WriteBoolValue("formatted", Formatted);
            writer.WriteStringValue("packageName", PackageName);
            writer.WriteStringValue("packageVersion", PackageVersion);
            writer.WriteBoolValue("readmeFound", ReadmeFound);
            writer.WriteStringValue("readmeText", ReadmeText);
        }
    }
}
