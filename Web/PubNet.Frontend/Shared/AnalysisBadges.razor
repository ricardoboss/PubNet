@inherits BaseComponent
@using PubNet.API.DTO
@inject ApiClient Http
@inject PackagesService Packages
@inject AnalysisService Analysis
@inject ILogger<AnalysisBadges> Logger

<Div style="display: flex; align-items: center; gap: 0.25rem" class="@ClassNames">
	@if (Mirrored)
	{
		<a href="@("https://pub.dev/packages/" + PackageName)" target="_blank">
			<Badge Color="Color.Secondary" Pill>Mirrored from pub.dev</Badge>
		</a>
	}

	@if (AnalysisDto?.DocumentationHref is not null)
	{
		<NavLink href="@(DocumentationUrl(AnalysisDto.DocumentationHref))">
			<Badge Color="Color.Info" Pill>Docs</Badge>
		</NavLink>
	}

	@switch (AnalysisDto?.Formatted)
	{
		case true:
			<Badge Color="Color.Success" Pill>Formatted</Badge>
			break;
		case false:
			<Badge Color="Color.Warning" Pill>Not Formatted</Badge>
			break;
		default:
			if (PackageVersionDto is not null && !Mirrored)
			{
				<Badge Color="Color.Secondary" Pill>Not analyzed yet</Badge>
			}
			break;
	}

	@if (IsLatest == true)
	{
		<Badge Color="Color.Success" Pill>Latest Version</Badge>
	}
	else if (IsLatest == false && !HideNonVersionSpecificBadges)
	{
		<Badge Color="Color.Warning" Pill>Not latest version</Badge>
	}

	@if (IsDiscontinued && !HideNonVersionSpecificBadges)
	{
		<Badge Color="Color.Danger" Pill>Discontinued</Badge>

		@if (ReplacedBy is not null)
		{
			<NavLink href="@(HrefToReplacement(ReplacedBy))">
				<Badge Color="Color.Warning" Pill>Replaced by <Code>@ReplacedBy</Code></Badge>
			</NavLink>
		}
	}

	@if (Retracted)
	{
		<Badge Color="Color.Danger" Pill>Retracted</Badge>
	}
</Div>

@code {

	[Parameter]
	public PackageDto? PackageDto { get; set; }

	[Parameter]
	public PackageVersionDto? PackageVersionDto { get; set; }

	[Parameter]
	public bool HideNonVersionSpecificBadges { get; set; }

	private bool? IsLatest => PackageDto?.Latest?.Version is null ? null : PackageDto?.Latest?.Version == PackageVersionDto?.Version;

	private PackageVersionAnalysisDto? AnalysisDto { get; set; }

	private string? PackageName => PackageDto?.Name ?? PackageVersionDto?.PubSpec.Name;

	private bool Mirrored => PackageDto?.Mirrored ?? false;

	private bool IsDiscontinued => PackageDto?.IsDiscontinued ?? false;

	private string? ReplacedBy => PackageDto?.ReplacedBy;

	private bool Retracted => PackageVersionDto?.Retracted ?? false;

	private static string HrefToReplacement(string name) => "/packages/" + name;

	private string DocumentationUrl(string uri) => Http.BaseAddress!.TrimEnd('/') + '/' + uri.TrimStart('/');

	/// <inheritdoc />
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (PackageVersionDto is null) return;

		if (!(PackageDto?.Mirrored ?? false))
		{
			AnalysisDto = await Analysis.GetAnalysisForVersion(PackageVersionDto.PubSpec.Name, PackageVersionDto.Version, false);
		}
	}

}
