@using PubNet.API.DTO
@using System.Diagnostics
@inject ApiClient Http

@if (Error is not null)
{
	<Alert Color="Color.Danger" Visible>
		<strong>Oops!</strong> @Error
	</Alert>
}

@if (Success is not null)
{
	<Alert Color="Color.Success" Visible>
		<strong>Alright!</strong> @Success
	</Alert>
}

@if (FormModel is not null)
{
	<Form @onsubmit="Submit">
		<Validations @ref="_validations" Mode="ValidationMode.Manual" Model="FormModel">
		<Validation>
			<Field Horizontal>
				<FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
				<FieldBody ColumnSize="ColumnSize.Is10">
					<TextEdit Placeholder="Your name" Role="@TextRole.Text" @bind-Text="@FormModel.Name" Autocomplete="name">
						<Feedback>
							<ValidationError />
						</Feedback>
					</TextEdit>
				</FieldBody>
			</Field>
		</Validation>
		<Validation>
			<Field Horizontal>
				<FieldLabel ColumnSize="ColumnSize.Is2">Website</FieldLabel>
				<FieldBody ColumnSize="ColumnSize.Is10">
					<TextEdit Placeholder="Your website" Role="@TextRole.Url" @bind-Text="@FormModel.Website" Autocomplete="url">
						<Feedback>
							<ValidationError />
						</Feedback>
					</TextEdit>
				</FieldBody>
			</Field>
		</Validation>
			<Row>
				<Column ColumnSize="ColumnSize.Is2"></Column>
				<Column ColumnSize="ColumnSize.Is10">
					<Button Color="Color.Success" Clicked="@Submit">Save</Button>
					<Button Color="Color.Secondary" Outline Clicked="@OnAborted">Abort</Button>
				</Column>
			</Row>
		</Validations>
	</Form>
}

@code {

	private Validations? _validations;

	[Parameter]
	public AuthorDto? Author { get; set; }

	[Parameter]
	public EventCallback<bool> OnDoneEditing { get; set; }

	private bool Submitting { get; set; }

	private string? Error { get; set; }
	private string? Success { get; set; }

	private EditAuthorRequest? FormModel { get; set; }

	/// <inheritdoc />
	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (Author is null)
			return;

		FormModel = new()
		{
			Name = Author.Name,
			Website = Author.Website,
		};
	}

	private async Task Submit()
	{
		if (_validations is null || !await _validations.ValidateAll()) return;

		Submitting = true;

		try
		{
			Error = null;
			Success = null;

			Debug.Assert(Author is not null);
			Debug.Assert(FormModel is not null);

			var response = await Http.PatchAsync($"authors/{Author.UserName}", FormModel);
			if (response.IsSuccessStatusCode)
			{
				Success = "Your profile was saved!";

				await OnDoneEditing.InvokeAsync(true);
			}
			else
			{
				var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
				if (errorResponse?.Error is null)
				{
					Error = "Unable to deserialize";

					return;
				}

				Error = errorResponse.Error.Message;
			}
		}
		finally
		{
			Submitting = false;
		}
	}

	private async Task OnAborted()
	{
		await OnDoneEditing.InvokeAsync(false);
	}

}
