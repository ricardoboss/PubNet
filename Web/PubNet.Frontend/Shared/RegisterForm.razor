@inject ApiClient Api

@if (Error is not null)
{
    <Alert Color="Color.Danger" Visible>
        <strong>Oh no!</strong> @Error
    </Alert>
}

@if (Success is not null)
{
    <Alert Color="Color.Success" Visible>
        <strong>Great!</strong> @Success
    </Alert>
}

<Form @onsubmit="Submit">
    <Validations @ref="_validations" Mode="ValidationMode.Manual" Model="CreateAccountForm">
        <Validation>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">E-Mail</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit Placeholder="Your e-mail address" Role="@TextRole.Email" @bind-Text="@CreateAccountForm.Email" Autocomplete="email">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Password</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit Placeholder="Your password" Role="@TextRole.Password" @bind-Text="@CreateAccountForm.Password" Autocomplete="current-password">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Username</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit Placeholder="Your username" Role="@TextRole.Text" @bind-Text="@CreateAccountForm.UserName" Autocomplete="username">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2" />
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Button Color="Color.Primary" Clicked="@Submit" Type="ButtonType.Submit">Register</Button>
            </FieldBody>
        </Field>
    </Validations>
</Form>

@code {
    private Validations? _validations;

    private CreateAccountDto CreateAccountForm { get; set; } = new CreateAccountDto();

    private string? Error { get; set; }
    private string? Success { get; set; }

    private async Task Submit()
    {
        if (_validations is null || !await _validations.ValidateAll()) return;

        Error = null;
        Success = null;

        // var response = await HttpClient.PostAsJsonAsync("authentication/register", CreateAccountForm);
        var response = await Api.Authentication.Account.PostAsync(CreateAccountForm);

        if (response is not null)
        {
            CreateAccountForm = new();

            Success = "Registration complete. You can now log in.";
        }
    }

}
