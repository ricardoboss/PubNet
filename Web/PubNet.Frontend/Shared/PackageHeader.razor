@using PubNet.API.DTO

@inject PackagesService Packages
@inject ApiClient Http

<PageTitle>@Title</PageTitle>

<Card>
	<CardBody>
		<CardTitle>
			<Heading Size="HeadingSize.Is1">
				@if (Version is null)
				{
					<Code>@Title</Code>
				}
				else
				{
					<ClickToCopyCode TextContent="@PubspecVersionText">
						@Title
					</ClickToCopyCode>
				}
			</Heading>
		</CardTitle>

		<CardText TextColor="TextColor.Muted">
			@if (Package is null)
			{
				<em>Loading...</em>
			}
			else
			{
				<Span>
					Published by <AuthorLink Username="@AuthorUserName"/>
				</Span>

				@if (Version is not null)
				{
					@:&nbsp;
					<Abbreviation Title="@Version.Published.ToString()">@(Version.Published.Humanize())</Abbreviation>
				}
			}

			<AnalysisBadges Margin="Margin.Is3.FromTop" PackageDto="@Package" PackageVersionDto="@Version"/>
		</CardText>
	</CardBody>
</Card>

@code {
	[Parameter]
	public PackageDto? Package { get; set; }

	[Parameter]
	public PackageVersionDto? Version { get; set; }

	private bool Loading { get; set; }

	private string? PackageName => Package?.Name;

	private string PubspecVersionText => PackageName is null || Version is null
		? string.Empty
		: TextGenerator.PubspecVersionText(PackageName, Version.Version, Package?.Mirrored ?? false, Http.BaseAddress);

	private string Title => PackageName + (Version is null ? string.Empty : $": {Version.Version}");

	private string? AuthorUserName => Package?.Author?.UserName;

}
