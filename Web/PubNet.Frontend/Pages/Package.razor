@page "/package/{PackageName}"
@page "/packages/{PackageName}"
@page "/package/{PackageName}/version/{PackageVersionUrl}"
@page "/packages/{PackageName}/versions/{PackageVersionUrl}"

@using PubNet.API.DTO

@inject PackagesService Packages
@inject AnalysisService Analysis

@if (Error is not null)
{
	<div class="alert alert-danger">
		<strong>Whoops!</strong> @Error
	</div>

	@if (ShowUpstreamLink)
	{
		<p>
			Maybe you can find this package at pub.dev instead: <a href="@("https://pub.dev/packages/" + PackageName)">pub.dev/packages/@PackageName</a>
		</p>
	}
}

@if (Info is not null)
{
	<div class="alert alert-info">
		@Info
	</div>
}

@if (PackageModel is not null)
{
	<PackageVersionOverview
		Package="@PackageModel"
		Version="@PackageVersionModel"
		OnError="e => Error = e"
		OnInfo="i => Info = i"
		OnEditing="e => Editing = e"
		Editing="@Editing"
		OnPackageChanged="ReloadPackage" />
}

@code
{
	[Parameter]
	public string? PackageName { get; set; }

	[Parameter]
	public string? PackageVersionUrl { get; set; }

	private string? PackageVersion
	{
		get => PackageVersionUrl is null ? null : TextGenerator.UrlSegmentToVersion(PackageVersionUrl);
		set => PackageVersionUrl = value is null ? null : TextGenerator.VersionToUrlSegment(value);
	}

	private PackageDto? PackageModel { get; set; }

	private PackageVersionDto? PackageVersionModel { get; set; }

	private string? Error { get; set; }

	private string? Info { get; set; }

	private bool Editing { get; set; }

	private bool ShowUpstreamLink { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await ReloadPackage();
	}

	private async Task ReloadPackage() {
		Error = null;
		PackageModel = null;
		Editing = false;
		ShowUpstreamLink = false;

		if (PackageName is null) return;

		try
		{
			PackageModel = await Packages.GetPackage(PackageName, true, true);
		}
		catch (PackageNotFoundException pnfe)
		{
			Error = pnfe.Message;
			ShowUpstreamLink = true;

			return;
		}
		catch (Exception e)
		{
			Error = e.Message;

			return;
		}

		PackageVersion ??= PackageModel?.Latest?.Version;
		if (PackageVersion is not null)
		{
			try
			{
				PackageVersionModel = await Packages.GetPackageVersion(PackageName, PackageVersion);
			}
			catch (Exception e)
			{
				Error = e.Message;

				return;
			}
		}

		if (!(PackageModel?.Mirrored ?? false))
		{
#pragma warning disable CS4014
			if (PackageModel?.Versions is not null)
				Task.WhenAll(PackageModel.Versions.OrderByDescending(v => v.Published).Take(10).Select(v => Analysis.GetAnalysisForVersion(PackageName, v.Version, false))).ContinueWith(_ => StateHasChanged());
#pragma warning restore CS4014
		}
	}
}
