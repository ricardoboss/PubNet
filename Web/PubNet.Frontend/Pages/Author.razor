@page "/author/{Username}"
@page "/authors/{Username}"
@using PubNet.API.DTO
@inject ApiClient Http
@inject AuthenticationService Auth
@inject AlertService Alert

<PageTitle>Package author @Username</PageTitle>

<Heading Size="HeadingSize.Is1">@Username</Heading>

@if (AuthorModel is null && GeneralError is null)
{
	<Paragraph>
		<em>Loading...</em>
	</Paragraph>
}

@if (GeneralError is not null)
{
	<Alert Color="Color.Danger" Visible>
		<strong>An error occurred:</strong> @GeneralError
	</Alert>
}

@if (AuthorModel is not null)
{
	@if (Editing)
	{
		<EditAuthorForm Author="AuthorModel" OnDoneEditing="DoneEditing"/>
	}
	else
	{
		<Paragraph>@AuthorModel.Name</Paragraph>

		<Paragraph>
			Joined <Abbreviation Title="@AuthorModel.RegisteredAt.ToString()">@AuthorModel.RegisteredAt.Humanize()</Abbreviation>
		</Paragraph>

		@if (AuthorModel.Website is not null)
		{
			<Paragraph>
				<a href="@AuthorModel.Website" target="_blank">@AuthorModel.Website</a>
			</Paragraph>
		}

		@if (IsSelf)
		{
			<Div Margin="Margin.Is3.OnY" style="display: flex; align-items: center; gap: 0.25rem">
				<Button Size="Size.Small" Color="Color.Info" Clicked="BeginEditing">
					Edit
				</Button>
				<Button Size="Size.Small" Color="Color.Danger" Clicked="OnDeleteClicked">
					Delete
				</Button>
			</Div>
		}

		@if (AuthorError is not null)
		{
			<Alert Color="Color.Danger" Visible>
				<strong>Oh no!</strong> @AuthorError
			</Alert>
		}

		@if (AuthorSuccess is not null)
		{
			<Alert Color="Color.Success" Visible>
				<strong>Ok!</strong> @AuthorSuccess
			</Alert>
		}
	}
}

<hr>

@if (AuthorPackages is null && PackagesError is null)
{
	<Paragraph>
		<em>Loading packages...</em>
	</Paragraph>
}

@if (PackagesError is not null)
{
	<Alert Color="Color.Danger">
		<strong>An error occurred while loading the author packages:</strong> @PackagesError
	</Alert>
}

@if (AuthorPackages is not null)
{
	<Heading Size="HeadingSize.Is2">Packages</Heading>

	<PackagesList Packages="AuthorPackages" />
}

@code
{
	[Parameter]
	public string? Username { get; set; }

	private bool IsSelf { get; set; }
	private bool Editing { get; set; }

	private AuthorDto? AuthorModel { get; set; }
	private string? GeneralError { get; set; }

	private string? AuthorSuccess { get; set; }
	private string? AuthorError { get; set; }

	private IEnumerable<SearchResultPackage>? AuthorPackages { get; set; }
	private string? PackagesError { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (Username is null)
		{
			GeneralError = "No username set.";

			return;
		}

		GeneralError = null;

		try
		{
			await FetchAuthorModel();

			await FetchAuthorPackages();

			IsSelf = await Auth.IsSelf(Username);
		}
		catch (Exception e)
		{
			GeneralError = e.Message;
		}
	}

	private async Task FetchAuthorModel()
	{
		AuthorModel = null;
		GeneralError = null;

		var author = await Http.GetAsync<AuthorDto>($"authors/{Username}");
		if (author is not null)
		{
			AuthorModel = author;
		}
		else
		{
			GeneralError = "Failed loading author";
		}
	}

	private async Task FetchAuthorPackages()
	{
		AuthorPackages = null;
		PackagesError = null;

		var response = await Http.GetAsync<AuthorPackagesResponse>($"authors/{Username}/packages");
		if (response?.Packages is not null)
		{
			AuthorPackages = response.Packages.Select(dto => new SearchResultPackage(dto.Name, dto.ReplacedBy, dto.IsDiscontinued, Username, dto.Latest?.Version, dto.Latest?.Published)).ToList();
		}
		else
		{
			PackagesError = "Failed loading authors packages";
		}
	}

	private void BeginEditing()
	{
		Editing = true;
	}

	private async Task DoneEditing(bool edited)
	{
		if (edited)
		{
			await FetchAuthorModel();
		}

		Editing = false;
	}

	private async Task OnDeleteClicked()
	{
		AuthorSuccess = null;
		AuthorError = null;

		var confirmation = await Alert.Prompt("Are you sure? All your packages remain but will be disconnected from your username.\r\n\r\nPlease enter your password to confirm:");
		if (string.IsNullOrWhiteSpace(confirmation))
			return;

		var response = await Http.PostAsync($"authors/{Username}/delete", new DeleteAuthorRequest(confirmation));
		if (response.IsSuccessStatusCode)
		{
			var successResponse = await response.Content.ReadFromJsonAsync<SuccessResponse>();
			if (successResponse is null)
			{
				AuthorError = "Unable to deserialize";

				return;
			}

			AuthorSuccess = successResponse.Success.Message;

			await Auth.Logout();
		}
		else
		{
			var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();

			AuthorError = errorResponse?.Error?.Message ?? "Failed to delete author";
		}
	}
}
