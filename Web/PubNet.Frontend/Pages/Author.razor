@page "/author/{Username}"
@page "/authors/{Username}"

@inject ApiClient Http
@inject AuthenticationService Auth
@inject AlertService Alert

<PageTitle>Package author @Username</PageTitle>

<Heading Size="HeadingSize.Is1">@Username</Heading>

@if (AuthorModel is null && GeneralError is null)
{
	<Paragraph>
		<em>Loading...</em>
	</Paragraph>
}

@if (GeneralError is not null)
{
	<Alert Color="Color.Danger" Visible>
		<strong>An error occurred:</strong> @GeneralError
	</Alert>
}

@if (AuthorModel is not null)
{
	<Paragraph>@AuthorModel.UserName</Paragraph>

	<Paragraph>
		Joined <Abbreviation Title="@AuthorModel.RegisteredAtUtc.ToString()">@AuthorModel.RegisteredAtUtc.Humanize()</Abbreviation>
	</Paragraph>

	@if (IsSelf)
	{
		<Div Margin="Margin.Is3.OnY" style="display: flex; align-items: center; gap: 0.25rem">
			<Button Size="Size.Small" Color="Color.Danger" Clicked="OnDeleteClicked">
				Delete
			</Button>
		</Div>
	}

	@if (AuthorError is not null)
	{
		<Alert Color="Color.Danger" Visible>
			<strong>Oh no!</strong> @AuthorError
		</Alert>
	}

	@if (AuthorSuccess is not null)
	{
		<Alert Color="Color.Success" Visible>
			<strong>Ok!</strong> @AuthorSuccess
		</Alert>
	}
}

<hr>

@if (AuthorPackages is null && PackagesError is null)
{
	<Paragraph>
		<em>Loading packages...</em>
	</Paragraph>
}

@if (PackagesError is not null)
{
	<Alert Color="Color.Danger">
		<strong>An error occurred while loading the author packages:</strong> @PackagesError
	</Alert>
}

@if (AuthorPackages is not null)
{
	<Heading Size="HeadingSize.Is2">Packages</Heading>

	<PackagesList Packages="AuthorPackages" />
}

@code
{
	[Parameter]
	public string? Username { get; set; }

	private bool IsSelf { get; set; }

	private AuthorDto? AuthorModel { get; set; }
	private string? GeneralError { get; set; }

	private string? AuthorSuccess { get; set; }
	private string? AuthorError { get; set; }

	private IEnumerable<PackageVersionDtoPackageDto>? AuthorPackages { get; set; }
	private string? PackagesError { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (Username is null)
		{
			GeneralError = "No username set.";

			return;
		}

		GeneralError = null;

		try
		{
			await FetchAuthor();

			await FetchAuthorPackages();

			IsSelf = await Auth!.IsSelf(Username);
		}
		catch (Exception e)
		{
			GeneralError = e.Message;
		}
	}

	private async Task FetchAuthor()
	{
		AuthorModel = null;
		GeneralError = null;

		var author = await Http!.Authors![Username!]!.GetAsync();
		if (author is not null)
		{
			AuthorModel = author;
		}
		else
		{
			GeneralError = "Failed loading author";
		}
	}

	private async Task FetchAuthorPackages()
	{
		AuthorPackages = null;
		PackagesError = null;

		var response = await Http!.Authors![Username!]!.Packages!.GetAsync();
		if (response?.Packages is {} packages)
		{
			AuthorPackages = packages;
		}
		else
		{
			PackagesError = "Failed loading authors packages";
		}
	}

	private async Task OnDeleteClicked()
	{
		AuthorSuccess = null;
		AuthorError = null;

		var confirmation = await Alert!.Prompt("Are you sure? All your packages remain but will be disconnected from your username.\r\n\r\nPlease enter your password to confirm:");
		if (string.IsNullOrWhiteSpace(confirmation))
			return;

		var dto = new DeleteAuthorDto
		{
			Password = confirmation,
		};

		try
		{
			await Http!.Authors![Username!]!.DeleteAsync(dto);

			await Auth!.Logout();
		}
		catch (Exception e)
		{
			AuthorError = e.Message;
		}
	}
}
